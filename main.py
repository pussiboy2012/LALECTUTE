import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading
import torch
from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor, pipeline
from datasets import load_dataset
from MarkDown import generate_markdown_concept
import pygame
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
pygame.mixer.init()

class SpeechRecognitionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("‚ö† LALECTUTE ‚ö†")
        self.root.geometry("500x300")
        self.root.resizable(False, False)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.file_path = tk.StringVar()
        self.language = tk.StringVar(value="russian")
        self.result_text = tk.StringVar()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
        self.load_model_thread = threading.Thread(target=self.load_model)
        self.load_model_thread.start()

    def create_widgets(self):
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_frame = ttk.Frame(self.root)
        file_frame.pack(pady=10, padx=10, fill='x')

        ttk.Label(file_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª:").pack(side='left')
        ttk.Entry(file_frame, textvariable=self.file_path, width=40).pack(side='left', padx=5)
        ttk.Button(file_frame, text="–û–±–∑–æ—Ä", command=self.browse_file).pack(side='left')

        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        lang_frame = ttk.Frame(self.root)
        lang_frame.pack(pady=10, padx=10, fill='x')

        ttk.Label(lang_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:").pack(side='left')
        ttk.Radiobutton(lang_frame, text='–†—É—Å—Å–∫–∏–π', variable=self.language, value='russian').pack(side='left', padx=5)
        ttk.Radiobutton(lang_frame, text='–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', variable=self.language, value='english').pack(side='left', padx=5)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10, padx=10, fill='x')

        self.generate_button = ttk.Button(button_frame, text="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", command=self.start_generation)
        self.generate_button.pack(side='left', padx=5)

        self.save_button = ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_text, state='disabled')
        self.save_button.pack(side='left', padx=5)

        self.play_button = ttk.Button(button_frame, text="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å", command=self.play_audio, state='disabled')
        self.play_button.pack(side='left', padx=5)

        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
        self.markdown_button = ttk.Button(button_frame, text="Markdown", command=self.convert_to_markdown)
        self.markdown_button.pack(side='left', padx=5)

        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_button = ttk.Button(button_frame, text=" ‚ö† ", command=self.show_info)
        info_button.pack(side='left', padx=5)

        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_frame = ttk.Frame(self.root)
        result_frame.pack(pady=10, padx=10, fill='both', expand=True)

        ttk.Label(result_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").pack(anchor='w')
        self.result_textbox = tk.Text(result_frame, height=5, wrap='word', state='disabled')
        self.result_textbox.pack(fill='both', expand=True)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(pady=10, padx=10, fill='x')
        self.progress.stop()



    def show_info(self):
        info_message = (
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LALECTUTE! üéâ\n\n"
            "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.\n"
            "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: *.wav *.mp3 *.ogg *.flac\n"
            "üç™ –Ø –∂–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–∏ –∏ –º–Ω–æ–≥–æ –ø–µ—á–µ–Ω–µ–∫! üç™"
        )
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", info_message)

    def convert_to_markdown(self):
        text = self.result_text.get()
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")
            return

        self.markdown_button.config(state='disabled')
        self.progress.start()

        convert_thread = threading.Thread(target=self.generate_markdown)
        convert_thread.start()

    def generate_markdown(self):
        try:
            markdown = generate_markdown_concept(self.result_text.get())

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            print("Markdown —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", markdown)  # –í—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Markdown

            if markdown:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Markdown –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                self.display_markdown(markdown)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ Markdown.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown: {e}")
        finally:
            self.progress.stop()
            self.markdown_button.config(state='normal')

    def display_markdown(self, markdown_text):
        # –ü—Ä–∏–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        markdown_window = tk.Toplevel(self.root)
        markdown_window.title("Markdown –ö–æ–Ω—Å–ø–µ–∫—Ç")
        text_box = tk.Text(markdown_window, wrap='word')
        text_box.insert(tk.END, markdown_text)
        text_box.config(state='disabled')
        text_box.pack(fill='both', expand=True)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_md_button = ttk.Button(markdown_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
                                    command=lambda: self.save_markdown(markdown_text))
        save_md_button.pack(pady=5)

    def save_markdown(self, markdown_text):
        file = filedialog.asksaveasfilename(defaultextension=".md",
                                            filetypes=[("Markdown files", "*.md"), ("All files", "*.*")])
        if file:
            try:
                with open(file, 'w', encoding='utf-8') as f:
                    f.write(markdown_text)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Markdown —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def browse_file(self):
        filetypes = (
            ("Audio files", "*.wav *.mp3 *.ogg *.flac"),
            ("All files", "*.*")
        )
        filename = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", initialdir="/", filetypes=filetypes)
        if filename:
            self.file_path.set(filename)
            self.play_button.config(state='normal')

    def load_model(self):
        try:
            self.update_status("‚ö†‚ö†‚ö† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...‚ö†‚ö†‚ö†")
            device = "cuda:0" if torch.cuda.is_available() else "cpu"
            torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32

            model_id = "openai/whisper-large-v3"

            self.model = AutoModelForSpeechSeq2Seq.from_pretrained(
                model_id, torch_dtype=torch_dtype, low_cpu_mem_usage=True, use_safetensors=True
            )
            self.model.to(device)

            self.processor = AutoProcessor.from_pretrained(model_id)

            self.pipe = pipeline(
                "automatic-speech-recognition",
                model=self.model,
                tokenizer=self.processor.tokenizer,
                feature_extractor=self.processor.feature_extractor,
                torch_dtype=torch_dtype,
                device=0 if device == "cuda:0" else -1,
            )

            self.update_status("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
            self.update_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏.")

    def start_generation(self):
        if not self.file_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
            return
        self.generate_button.config(state='disabled')
        self.save_button.config(state='disabled')
        self.progress.start()
        self.result_textbox.config(state='normal')
        self.result_textbox.delete(1.0, tk.END)
        self.result_textbox.config(state='disabled')

        gen_thread = threading.Thread(target=self.generate_text)
        gen_thread.start()

    def generate_text(self):
        try:
            self.update_status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
            result = self.pipe(self.file_path.get(), generate_kwargs={"language": self.language.get()})
            text = result["text"]

            self.result_text.set(text)
            self.result_textbox.config(state='normal')
            self.result_textbox.delete(1.0, tk.END)
            self.result_textbox.insert(tk.END, text)
            self.result_textbox.config(state='disabled')

            self.save_button.config(state='normal')
            self.update_status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e}")
            self.update_status("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        finally:
            self.progress.stop()
            self.generate_button.config(state='normal')
    def save_text(self):
        if not self.result_text.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".txt",
                                            filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file:
            try:
                with open(file, 'w', encoding='utf-8') as f:
                    f.write(self.result_text.get())
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def play_audio(self):
        try:
            if os.path.exists(self.file_path.get()):
                pygame.mixer.music.load(self.file_path.get())
                pygame.mixer.music.play()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ: {e}")

    def update_status(self, message):
        self.root.title(f"LALECTUTE - {message}")

if __name__ == "__main__":
    root = tk.Tk()
    app = SpeechRecognitionApp(root)
    root.mainloop()
